import Head from "next/head";
import styles from "@/styles/Home.module.css";
import { useEffect, useState } from "react";

export default function Home() {
    return (
        <>
            <Head>
                <title>Create Next App</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <meta
                    name="viewport"
                    content="width=device-width, initial-scale=1"
                />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main className={styles.main}>
                <Transactions></Transactions>
            </main>
        </>
    );
}

function Transactions() {
    const [transactions, setTransactions] = useState(null);
    const [isLoading, setLoading] = useState(false);
    const [customers, setCustomers] = useState(null);

    useEffect(() => {
        setLoading(true);
        fetch("../fake-data/mockResponse.json")
            .then((res) => res.json())
            .then((data) => {
                parseCustomerInfo(data.data.transactions);
                setTransactions(data.data.transactions);
            });
    }, []);

    function parseCustomerInfo(transactionList) {
        let customersObj = {};
        for (let transaction of transactionList) {
            if (customersObj[transaction.customerId]) {
                const rewardPoints = calculateRewardPoints(transaction.cost);
                customersObj[transaction.customerId][
                    transaction.date
                ].data.push({
                    ...transaction,
                    rewardPoints: rewardPoints,
                });
                customersObj[transaction.customerId][
                    transaction.date
                ].monthlyRewardPoints += rewardPoints;
                customersObj[transaction.customerId].totalRewardPoints +=
                    rewardPoints;
            } else {
                const months = {
                    January: { data: [], monthlyRewardPoints: 0 },
                    February: { data: [], monthlyRewardPoints: 0 },
                    March: { data: [], monthlyRewardPoints: 0 },
                }; //add rest of months.
                const rewardPoints = calculateRewardPoints(transaction.cost);
                customersObj[transaction.customerId] = months;
                customersObj[transaction.customerId][
                    transaction.date
                ].data.push({
                    ...transaction,
                    rewardPoints: rewardPoints,
                });
                customersObj[transaction.customerId][
                    transaction.date
                ].monthlyRewardPoints += rewardPoints;
                customersObj[transaction.customerId].customerId =
                    transaction.customerId;
                customersObj[transaction.customerId].totalRewardPoints =
                    rewardPoints;
            }
        }
        const customersArr = Object.values(customersObj);
        setCustomers(Object.values(customersArr));
        setLoading(false);
    }

    function calculateRewardPoints(cost) {
        cost = cost.slice(1);
        cost = +cost;
        if (cost < 50) {
            return 0;
        } else if (cost <= 100) {
            return cost - 50;
        } else {
            return (cost - 100) * 2 + 50;
        }
    }

    if (isLoading) {
        return <p>Loading...</p>;
    } else {
        return (
            <div className={styles.description}>
                {customers.map((customer) => (
                    <div>
                        <p>
                            Customer ID: {customer.customerId} total reward
                            points: {customer.totalRewardPoints}
                        </p>
                        <p>
                            January reward points {customer.monthlyRewardPoints}
                        </p>
                        {customer["January"].data.map((transaction) => (
                            <p>
                                transaction: {transaction.cost} date:{" "}
                                {transaction.date} rewardPoints:{" "}
                                {transaction.rewardPoints}
                            </p>
                        ))}

                        <p>
                            February reward points{" "}
                            {customer["February"].monthlyRewardPoints}
                        </p>
                        {customer["February"].data.map((transaction) => (
                            <p>
                                transaction: {transaction.cost} date:{" "}
                                {transaction.date} rewardPoints:{" "}
                                {transaction.rewardPoints}
                            </p>
                        ))}
                        <p>
                            March reward points{" "}
                            {customer["March"].monthlyRewardPoints}
                        </p>
                        {customer["March"].data.map((transaction) => (
                            <p>
                                transaction: {transaction.cost} transaction
                                date: {transaction.date} reward points from
                                transaction: {transaction.rewardPoints}
                            </p>
                        ))}
                    </div>
                ))}
            </div>
        );
    }
}
